'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchingData = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _model = require('../core/model');

var _function = require('../util/function');

var _dispatch = require('./dispatch');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base class of the higher order component.
 * Manages the component lifecycle to try to fetch on mount/update.
 * Dispatches the actions for real fetching and maps properties to decorated
 * component
 */
var AbstractWithFetches = function (_React$Component) {
  _inherits(AbstractWithFetches, _React$Component);

  function AbstractWithFetches() {
    _classCallCheck(this, AbstractWithFetches);

    return _possibleConstructorReturn(this, (AbstractWithFetches.__proto__ || Object.getPrototypeOf(AbstractWithFetches)).apply(this, arguments));
  }

  _createClass(AbstractWithFetches, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.tryToFetch();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.tryToFetch();
    }
  }, {
    key: 'tryToFetch',
    value: function tryToFetch() {
      var _props = this.props,
          state = _props.state,
          dispatch = _props.dispatch;

      (0, _dispatch.dispatchFetches)(this.props, state, dispatch, this.getFetches());
    }
  }, {
    key: 'render',
    value: function render() {
      var fetched = this.mapStateToProps();
      var Wrapped = this.getWrappedComponent();
      /* eslint no-unused-vars: 0 */

      var _props2 = this.props,
          state = _props2.state,
          dispatch = _props2.dispatch,
          restOfProps = _objectWithoutProperties(_props2, ['state', 'dispatch']);

      return _react2.default.createElement(Wrapped, _extends({}, restOfProps, fetched));
    }
  }, {
    key: 'mapStateToProps',
    value: function mapStateToProps() {
      var _this2 = this;

      /* eslint no-unused-vars: 0 */
      var _props3 = this.props,
          state = _props3.state,
          dispatch = _props3.dispatch,
          restOfProps = _objectWithoutProperties(_props3, ['state', 'dispatch']);

      return this.getFetches().reduce(function (props, fetch) {
        if (!!fetch.on(restOfProps, _this2.props.state)) {
          props[fetch.propName] = _this2.mapFetchToProp(fetch, _this2.props.state);
        }
        return props;
      }, {});
    }
  }, {
    key: 'mapFetchToProp',
    value: function mapFetchToProp(_ref, state) {
      var storeFieldName = _ref.storeFieldName,
          transforming = _ref.transforming;

      var stateValue = state.artemisa[storeFieldName];
      return (0, _model.isFetchedSlot)(stateValue) ? _extends({}, stateValue, { value: transforming(stateValue.value) }) : stateValue;
    }
  }]);

  return AbstractWithFetches;
}(_react2.default.Component);

/**
 * A Fetch internal Descriptor has the following form
 * {
 *    propName (always present): property name to use to inject the slot,
 *    storeFieldName (always present): the property to store the cache in the store.
 *    call (always present): function(props, state) that returns the call object
 *    transforming: optional transformation
 * }
 */


var createFetchDescriptors = function createFetchDescriptors(fetches) {
  return Object.entries(fetches).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        name = _ref3[0],
        value = _ref3[1];

    return {
      propName: name,
      storeFieldName: value.name || name, // defaults to propName
      call: (0, _function.isFunction)(value) ? value : value.call,
      transforming: value.transforming || _function.identity,
      on: value.on || _function.trueFn
    };
  });
};

/**
 * Decorator function to create a React Higher-order Component wrapping
 * your component so that Artemisa can take care of server fetches.
 * 
 * @param {*} fetches an object that describes one or many "fetches" as properties.
 */
var fetchingData = exports.fetchingData = function fetchingData(fetches) {
  return function (WrappedComponent) {
    var fetchDescriptors = createFetchDescriptors(fetches);

    var WithFetches = function (_AbstractWithFetches) {
      _inherits(WithFetches, _AbstractWithFetches);

      function WithFetches() {
        var _ref4;

        var _temp, _this3, _ret;

        _classCallCheck(this, WithFetches);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this3 = _possibleConstructorReturn(this, (_ref4 = WithFetches.__proto__ || Object.getPrototypeOf(WithFetches)).call.apply(_ref4, [this].concat(args))), _this3), _this3.getFetches = function () {
          return fetchDescriptors;
        }, _this3.getWrappedComponent = function () {
          return WrappedComponent;
        }, _temp), _possibleConstructorReturn(_this3, _ret);
      }

      return WithFetches;
    }(AbstractWithFetches);

    WithFetches.displayName = 'WithFetches(' + getDisplayName(WrappedComponent) + ')';
    return (0, _reactRedux.connect)(function (state) {
      return { state: state };
    }, function (dispatch) {
      return { dispatch: dispatch };
    })(WithFetches);
  };
};

var getDisplayName = function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
};