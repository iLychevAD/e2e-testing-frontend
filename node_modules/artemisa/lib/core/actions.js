'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isError = exports.isReceive = exports.isRequest = exports.isDerivedActionFor = exports.isApiCall = exports.simulateDataReceive = exports.callFromAction = exports.onErrorActionCreator = exports.onReceiveActionCreator = exports.onRequestActionCreator = exports.ApiCallType = exports.errorTypeFor = exports.receiveTypeFor = exports.requestTypeFor = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ramda = require('ramda');

//
// Action creators
//

var suffix = (0, _ramda.flip)(_ramda.concat);
var requestTypeFor = exports.requestTypeFor = suffix('_REQUEST');
var receiveTypeFor = exports.receiveTypeFor = suffix('_RECEIVE');
var errorTypeFor = exports.errorTypeFor = suffix('_ERROR');

var ApiCallType = exports.ApiCallType = {
  REQUEST: 'REQUEST',
  RECEIVE: 'RECEIVE',
  ERROR: 'ERROR'
};

var actionCreator = function actionCreator(callType, typeFn) {
  return function (action) {
    return {
      originType: action.type,
      type: typeFn(action.type),
      apiCallType: callType,
      path: action.dataApiCall.path
    };
  };
};

var onRequestActionCreator = exports.onRequestActionCreator = actionCreator(ApiCallType.REQUEST, requestTypeFor);
var onReceiveActionCreator = exports.onReceiveActionCreator = function onReceiveActionCreator(action) {
  return function (data) {
    return _extends({}, actionCreator(ApiCallType.RECEIVE, receiveTypeFor)(action), {
      data: data
    });
  };
};
var onErrorActionCreator = exports.onErrorActionCreator = function onErrorActionCreator(action) {
  return function (error) {
    return _extends({}, actionCreator(ApiCallType.ERROR, errorTypeFor)(action), {
      error: error
    });
  };
};

/** Gets the "call" object from an action, populating the token if necesary */
var callFromAction = exports.callFromAction = function callFromAction(store, action) {
  // TODO: this should be an optional "middleware"
  var call = action.dataApiCall;
  if (call.requiresAuthentication) {
    call.token = getAuthToken(store.getState());
  }
  return call;
};

// HARDCODED: coupled with our app. This is the only point to become
// apiCalls an external library
var getAuthToken = function getAuthToken(state) {
  return state.login ? state.login.token : undefined;
};

var simulateDataReceive = exports.simulateDataReceive = function simulateDataReceive(action, data) {
  return onReceiveActionCreator(action)(data);
};

//
// Checking
// 

var isApiCall = exports.isApiCall = function isApiCall(action) {
  return action.dataApiCall;
};

var isDerivedActionFor = exports.isDerivedActionFor = function isDerivedActionFor(action, apiActionType) {
  return action.originType === apiActionType;
};

var isApiCallOfType = (0, _ramda.propEq)('apiCallType');
var isRequest = exports.isRequest = isApiCallOfType(ApiCallType.REQUEST);
var isReceive = exports.isReceive = isApiCallOfType(ApiCallType.RECEIVE);
var isError = exports.isError = isApiCallOfType(ApiCallType.ERROR);